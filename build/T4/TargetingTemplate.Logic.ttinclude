<#@ include file = "TargetingTemplate.Models.ttinclude"#><#+
#nullable enable

	private TargetingOptions Targeting { get; set; } = new();

	private string GetTargetFrameworkMonikers(Shims filter)
	{
		var shims = GetAllMonikerShims()
			.Where(x => x.Value.HasFlag(filter))
			.OrderBy(x => x.Key == Targeting.DefaultFramework ? 0 : 1)
			.Select(x => x.Key);
		return string.Join(";", shims);
	}

	private string GetMonikerVersion(string moniker) =>
		moniker switch
		{
			_ when moniker.StartsWith("netstandard", StringComparison.Ordinal) =>
				moniker.Substring("netstandard".Length),
			_ when moniker.StartsWith("netcoreapp", StringComparison.Ordinal) =>
				moniker.Substring("netcoreapp".Length),
			_ when moniker.StartsWith("net", StringComparison.Ordinal) =>
				moniker.Substring("net".Length),
			_ => moniker
			};

	private IEnumerable<KeyValuePair<string, Shims>> GetAllMonikerShims() =>
		// In most cases dictionary preserves insert order until first reallocation
		// As a caveat we do sort dictionary by keys,
		// but current logic is pretty naive may not work for future moniker formats.
		// If any issue please replace with a proper moniker comparer.
		Targeting.NetCoreShims.OrderByDescending(x => GetMonikerVersion(x.Key))
			.Concat(Targeting.NetStandardShims.OrderByDescending(x => GetMonikerVersion(x.Key)))
			.Concat(Targeting.NetFrameworkShims.OrderByDescending(x => GetMonikerVersion(x.Key)));

	private IEnumerable<KeyValuePair<string, Shims>> GetMonikerShims(Shims anyFilter) =>
		GetAllMonikerShims().Where(x => (x.Value & anyFilter) != 0);

	private static string FormatFlag(Shims shims, Shims filter) =>
		shims.HasFlag(filter).ToString().ToLowerInvariant();
#>