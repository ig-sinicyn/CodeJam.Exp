<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file = "TargetingTemplate.Logic.ttinclude"#><#+
	private void Emit(TargetingOptions options)
	{
		Targeting = options;
#><!--
This code was generated by a tool.

Changes to this file may cause incorrect behavior and will be lost if
he code is regenerated.
-->
<Project>

	<!-- We DO most development and testing on <#= Targeting.DefaultFramework #> target -->
	<PropertyGroup Condition=" '$(TargetFramework)' == '<#= Targeting.DefaultFramework #>' ">
		<DefineConstants>$(DefineConstants);DEFAULT_PLATFORM</DefineConstants>
	</PropertyGroup>

	<!-- Templates for <TargetFrameworks/> project property -->
	<!-- Visual Studio and Rider do select the first moniker in list as default target
		therefore we place our default platform (<#= Targeting.DefaultFramework #>) at start of the list -->
	<PropertyGroup>
		<CopyMeTargetFrameworks><#= GetTargetFrameworkMonikers(Package) #></CopyMeTargetFrameworks>
		<CopyMeMinimalTargetFrameworks><#= GetTargetFrameworkMonikers(Package | Minimal) #></CopyMeMinimalTargetFrameworks>
		<CopyMeTestTargetFrameworks><#= GetTargetFrameworkMonikers(Test) #></CopyMeTestTargetFrameworks>
		<CopyMeMinimalTestTargetFrameworks><#= GetTargetFrameworkMonikers(Test | Minimal) #></CopyMeMinimalTestTargetFrameworks>
	</PropertyGroup>

	<!-- Package reference switches -->
	<PropertyGroup>
<#+
		foreach (var shim in GetShimFlags(PackageShims))
		{
#>
		<Use<#= shim #>>false</Use<#= shim #>>
<#+
		}
#>
	</PropertyGroup>
<#+
		foreach (var p in GetMonikerShims(PackageShims))
		{
#>

	<PropertyGroup Condition=" '$(TargetFramework)' == '<#= p.Key #>' ">
<#+
			foreach (var shim in GetShimFlags(p.Value & PackageShims))
			{
#>
		<Use<#= shim #>>true</Use<#= shim #>>
<#+
			}
#>
	</PropertyGroup>
<#+
		}
#>

	<!-- Assembly versions -->
	<PropertyGroup>
<#+
		foreach (var p in Targeting.DefaultPackageVersions)
		{
#>
		<<#= p.Key #>Version><#= p.Value #></<#= p.Key #>Version>
<#+
		}
#>
	</PropertyGroup>
<#+
		foreach (var g in Targeting.PackageVersionOverrides)
		{
#>

	<PropertyGroup Condition=" '$(TargetFramework)' == '<#= g.Key #>' ">
<#+
			foreach (var p in g.Value)
			{
#>
		<<#= p.Key #>Version><#= p.Value #></<#= p.Key #>Version>
<#+
			}
#>
	</PropertyGroup>
<#+
		}
#>
<#+
		EmitTargetingConstants(".Net Core", "TARGETS_NETCOREAPP", Targeting.NetCoreShims);
		EmitTargetingConstants(".Net Standard", "TARGETS_NETSTANDARD", Targeting.NetStandardShims);
		EmitTargetingConstants(".Net Framework", "TARGETS_NET", Targeting.NetFrameworkShims);
#>

</Project>
<#+
	}

	private void EmitTargetingConstants(string description, string platform, Dictionary<string, Shims> monikerShims)
	{
		var monikers = monikerShims.OrderBy(x => GetMonikerVersion(x.Key)).Select(x => x.Key).ToArray();
#>

	<!-- DefineConstants for <#= description #> -->
<#+
		for (var monikerIndex = 0; monikerIndex < monikers.Length; monikerIndex++)
		{
			var target = monikers[monikerIndex];
			var lessThanConstants = string.Join(
				";",
				monikers
					.Skip(1 + monikerIndex)
					.Select(m => "LESSTHAN_" + m.Replace(".", "").ToUpperInvariant()));

			var notLessThanConstants = string.Join(
				";",
				monikers
					.Take(monikerIndex + 1)
					.Select(m => m.Replace(".", "").ToUpperInvariant() + "_OR_GREATER"));
#>
	<PropertyGroup Condition=" '$(TargetFramework)' == '<#= target #>' ">
		<DefineConstants>$(DefineConstants);<#= platform #></DefineConstants>
<#+
			if (lessThanConstants != "")
			{
#>
		<DefineConstants>$(DefineConstants);<#= lessThanConstants #></DefineConstants>
<#+
			}
			if (notLessThanConstants != "")
			{
#>
		<DefineConstants>$(DefineConstants);<#= notLessThanConstants #></DefineConstants>
<#+
			}
#>
	</PropertyGroup>
<#+
		}
	}
#>